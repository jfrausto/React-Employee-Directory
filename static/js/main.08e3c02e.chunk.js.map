{"version":3,"sources":["components/Header.js","components/TableBody.js","components/DataTable.js","components/Nav.js","utils/API.js","components/DataArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","TableBody","_ref","users","undefined","name","map","_ref2","picture","login","phone","email","dob","key","uuid","data-th","src","medium","alt","first","last","href","target","date","dateArray","split","dayArray","YY","join","formatDate","Fragment","DataTable","headers","handleSort","id","width","style","onClick","toLowerCase","components_TableBody","Nav","props","type","placeholder","onChange","e","handleInputChange","API","axios","get","DataArea","state","order","filteredUsers","searchTerm","value","filteredList","_this","filter","user","Object","values","indexOf","setState","header","sortedUsers","sort","b","localeCompare","_this2","this","then","res","data","results","components_Nav","components_DataTable","Component","App","Header_Header","components_DataArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08e3c02e.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../styles/Header.css\";\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header container-fluid py-2\">\r\n            <h1>Employee Directory</h1>\r\n            <p>Use the search box to find employees</p>\r\n            <p>Click on the carrots on each heading to sort by ascending and descending order</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nfunction TableBody({ users }) {\r\n  // format the incoming date into [MM - DD - YY]\r\n  function formatDate(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const YY = dateArray[0];\r\n    const MM = dateArray[1];\r\n    const DD = dayArray[0];\r\n    const hyphenDate = [MM, DD, YY].join(\"-\");\r\n    return hyphenDate;\r\n  }\r\n\r\n    // render empty html once you start typing, and you find no matches\r\n    // else, we found and match so print some table rows\r\n  return (\r\n    <tbody>\r\n      {users[0] !== undefined && users[0].name !== undefined ? (\r\n        users.map(({ picture, login, name, phone, email, dob }) => {\r\n          return (\r\n            <tr key={login.uuid}>\r\n              <td data-th=\"Image\" className=\"align-middle\">\r\n                <img\r\n                  src={picture.medium}\r\n                  alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                  className=\"img-responsive\"\r\n                />\r\n              </td>\r\n              <td data-th=\"Name\" className=\"align-middle\">\r\n                {name.first} {name.last}\r\n              </td>\r\n              <td data-th=\"Email\" className=\"align-middle\">\r\n                <a href={\"mailto:\" + email} target=\"__blank\">\r\n                  {email}\r\n                </a>\r\n              </td>\r\n              <td data-th=\"Phone\" className=\"align-middle\">\r\n                {phone}\r\n              </td>\r\n              <td data-th=\"DOB\" className=\"align-middle\">\r\n                {formatDate(dob.date)}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\nimport TableBody from \"./TableBody\";\r\nimport \"../styles/DataTable.css\";\r\n\r\n// this functional component contains the table headers and \r\n// the bulk of the data in TableBody\r\nfunction DataTable({ headers, users, handleSort }) {\r\n  return (\r\n    <div className=\"data-table mt-2\">\r\n      <table\r\n        id=\"table\"\r\n        className=\"table table-striped\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            {headers.map(({ name, width }) => {\r\n              return (\r\n                <th\r\n                  className=\"col\"\r\n                  key={name}\r\n                  style={{ width }}\r\n                  onClick={() => {\r\n                    handleSort(name.toLowerCase());\r\n                  }}\r\n                >\r\n                  {name}\r\n                  <span className=\"carrot\"></span>\r\n                </th>\r\n              );\r\n            })}\r\n          </tr>\r\n        </thead>\r\n\r\n        <TableBody users={users} />\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataTable;\r\n","import React from \"react\";\r\nimport \"../styles/Nav.css\";\r\n\r\n// this functional component contains and returns the search box\r\nfunction Nav(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n      <div className=\"navbar-collapse row\" id=\"navbarNav\">\r\n        <div className=\"search-box\">\r\n          <form className=\"form-search\">\r\n            <input \r\n            className=\"form-control form-control-lg\" \r\n            type=\"text\" \r\n            placeholder=\"Search for an employee...\"\r\n            onChange={e => props.handleInputChange(e)}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Nav;","import axios from \"axios\";\n\nexport default {\n  // Gets all users\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};\n","import React, { Component } from 'react';\r\nimport DataTable from \"./DataTable.js\";\r\nimport Nav from \"./Nav\";\r\nimport API from \"../utils/API\";\r\nimport \"../styles/DataArea.css\";\r\n\r\nclass DataArea extends Component {\r\n    // initialize state to have an array of users, sort order, and filtered users\r\n    state = { \r\n        users: [{}],\r\n        order: \"descend\",\r\n        filteredUsers: [{}]\r\n    };\r\n    // headers of each column\r\n    headers = [\r\n        { name: \"Image\", width: \"15%\" },\r\n        { name: \"Name\", width: \"10%\" },\r\n        { name: \"Email\", width: \"20%\" },\r\n        { name: \"Phone\", width: \"20%\" },\r\n        { name: \"DOB\", width: \"10%\" }\r\n    ];\r\n\r\n    // get users and copy them into filtered users\r\n    componentDidMount() {\r\n        API.getUsers().then( (res) => {\r\n            this.setState({\r\n                users: res.data.results,\r\n                filteredUsers: res.data.results\r\n            });\r\n        });\r\n    }\r\n\r\n    // handles the event when you type into the search box\r\n    handleInputChange = (e) => {\r\n        const searchTerm = e.target.value;\r\n        const filteredList = this.state.users.filter( (user) => {\r\n            let reducedTerm = Object.values(user).join(\"\").toLowerCase();\r\n            return (reducedTerm.indexOf(searchTerm.toLowerCase()) !== -1);\r\n        });\r\n\r\n        this.setState({ filteredUsers: filteredList});\r\n    }\r\n\r\n    // handles sorting in multiple cases\r\n    handleSort = (header) => {\r\n        // toggles ascend/descend sorting\r\n        if (this.state.order === \"descend\") {\r\n          this.setState({\r\n            order: \"ascend\"\r\n          })\r\n        } else {\r\n          this.setState({\r\n            order: \"descend\"\r\n          })\r\n        }\r\n        \r\n        // compare function to sort accordingly.\r\n        // handles numerical as well as alphabetical sorting\r\n        const compare = (a, b) => {\r\n          if (this.state.order === \"descend\") {\r\n            // check for missing values\r\n            if (a[header] === undefined) {\r\n                return 1;\r\n              } else if (b[header] === undefined) {\r\n                return -1;\r\n              }\r\n              // sort by name, phone, email, and DOB respectively\r\n              else if (header === \"name\") {\r\n                return b[header].first.localeCompare(a[header].first);\r\n              } else if (header === \"phone\"){  // numerical\r\n                return b[header].localeCompare(a[header]);\r\n              } else if (header === \"email\") {\r\n                return b[header].localeCompare(a[header]);\r\n              } else if (header === \"dob\") {\r\n                return b[header].date.localeCompare(a[header].date);\r\n              }\r\n          } else {  // ASCEND SORT, check for undefined\r\n            if (a[header] === undefined) {\r\n                return 1;\r\n              } else if (b[header] === undefined) {\r\n                return -1;\r\n              }\r\n              // sort by name, phone, email, and DOB respectively\r\n              else if (header === \"name\") {\r\n                return a[header].first.localeCompare(b[header].first);\r\n              } else if (header === \"phone\") {\r\n                return a[header].localeCompare(b[header]);\r\n              } else if (header === \"email\") {\r\n                return a[header].localeCompare(b[header]);\r\n              } else if (header === \"dob\") {\r\n                return a[header].date.localeCompare(b[header].date);\r\n              }\r\n          }\r\n    \r\n        }\r\n        // filter according to the compare function\r\n        const sortedUsers = this.state.filteredUsers.sort(compare);\r\n        this.setState({ filteredUsers: sortedUsers });\r\n      }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Nav \r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n                <div className=\"table-area\">\r\n                    <DataTable \r\n                        headers={this.headers}\r\n                        users={this.state.filteredUsers}\r\n                        handleSort={this.handleSort}\r\n                    />\r\n                </div>\r\n            </div>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nexport default DataArea;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport DataArea from \"./components/DataArea\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <DataArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}